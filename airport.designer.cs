#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UcakBileti
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Airports")]
	public partial class AirportDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertflightpricess(flightpricess instance);
    partial void Updateflightpricess(flightpricess instance);
    partial void Deleteflightpricess(flightpricess instance);
    partial void Insertflying(flying instance);
    partial void Updateflying(flying instance);
    partial void Deleteflying(flying instance);
    partial void Insertlocation(location instance);
    partial void Updatelocation(location instance);
    partial void Deletelocation(location instance);
    partial void Insertpassenger(passenger instance);
    partial void Updatepassenger(passenger instance);
    partial void Deletepassenger(passenger instance);
    partial void Insertplane(plane instance);
    partial void Updateplane(plane instance);
    partial void Deleteplane(plane instance);
    partial void Insertreservationflying(reservationflying instance);
    partial void Updatereservationflying(reservationflying instance);
    partial void Deletereservationflying(reservationflying instance);
    partial void Insertrezervationprice(rezervationprice instance);
    partial void Updaterezervationprice(rezervationprice instance);
    partial void Deleterezervationprice(rezervationprice instance);
    partial void Insertrezervation(rezervation instance);
    partial void Updaterezervation(rezervation instance);
    partial void Deleterezervation(rezervation instance);
    partial void Insertroute(route instance);
    partial void Updateroute(route instance);
    partial void Deleteroute(route instance);
    #endregion
		
		public AirportDataContext() : 
				base(global::UcakBileti.Properties.Settings.Default.AirportsContext, mappingSource)
		{
			OnCreated();
		}
		
		public AirportDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AirportDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AirportDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AirportDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<flightpricess> flightpricesses
		{
			get
			{
				return this.GetTable<flightpricess>();
			}
		}
		
		public System.Data.Linq.Table<flying> flyings
		{
			get
			{
				return this.GetTable<flying>();
			}
		}
		
		public System.Data.Linq.Table<location> locations
		{
			get
			{
				return this.GetTable<location>();
			}
		}
		
		public System.Data.Linq.Table<passenger> passengers
		{
			get
			{
				return this.GetTable<passenger>();
			}
		}
		
		public System.Data.Linq.Table<plane> planes
		{
			get
			{
				return this.GetTable<plane>();
			}
		}
		
		public System.Data.Linq.Table<reservationflying> reservationflyings
		{
			get
			{
				return this.GetTable<reservationflying>();
			}
		}
		
		public System.Data.Linq.Table<rezervationprice> rezervationprices
		{
			get
			{
				return this.GetTable<rezervationprice>();
			}
		}
		
		public System.Data.Linq.Table<rezervation> rezervations
		{
			get
			{
				return this.GetTable<rezervation>();
			}
		}
		
		public System.Data.Linq.Table<route> routes
		{
			get
			{
				return this.GetTable<route>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.flightpricess")]
	public partial class flightpricess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _ucusid;
		
		private string _fiyat;
		
		private EntityRef<flying> _flying;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnucusidChanging(int value);
    partial void OnucusidChanged();
    partial void OnfiyatChanging(string value);
    partial void OnfiyatChanged();
    #endregion
		
		public flightpricess()
		{
			this._flying = default(EntityRef<flying>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ucusid", DbType="Int NOT NULL")]
		public int ucusid
		{
			get
			{
				return this._ucusid;
			}
			set
			{
				if ((this._ucusid != value))
				{
					if (this._flying.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnucusidChanging(value);
					this.SendPropertyChanging();
					this._ucusid = value;
					this.SendPropertyChanged("ucusid");
					this.OnucusidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fiyat", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string fiyat
		{
			get
			{
				return this._fiyat;
			}
			set
			{
				if ((this._fiyat != value))
				{
					this.OnfiyatChanging(value);
					this.SendPropertyChanging();
					this._fiyat = value;
					this.SendPropertyChanged("fiyat");
					this.OnfiyatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="flying_flightpricess", Storage="_flying", ThisKey="ucusid", OtherKey="id", IsForeignKey=true)]
		public flying flying
		{
			get
			{
				return this._flying.Entity;
			}
			set
			{
				flying previousValue = this._flying.Entity;
				if (((previousValue != value) 
							|| (this._flying.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._flying.Entity = null;
						previousValue.flightpricesses.Remove(this);
					}
					this._flying.Entity = value;
					if ((value != null))
					{
						value.flightpricesses.Add(this);
						this._ucusid = value.id;
					}
					else
					{
						this._ucusid = default(int);
					}
					this.SendPropertyChanged("flying");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.flying")]
	public partial class flying : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _rotationid;
		
		private System.DateTime _ktarih;
		
		private System.DateTime _vtarih;
		
		private int _planeid;
		
		private EntitySet<flightpricess> _flightpricesses;
		
		private EntitySet<reservationflying> _reservationflyings;
		
		private EntityRef<plane> _plane;
		
		private EntityRef<route> _route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrotationidChanging(int value);
    partial void OnrotationidChanged();
    partial void OnktarihChanging(System.DateTime value);
    partial void OnktarihChanged();
    partial void OnvtarihChanging(System.DateTime value);
    partial void OnvtarihChanged();
    partial void OnplaneidChanging(int value);
    partial void OnplaneidChanged();
    #endregion
		
		public flying()
		{
			this._flightpricesses = new EntitySet<flightpricess>(new Action<flightpricess>(this.attach_flightpricesses), new Action<flightpricess>(this.detach_flightpricesses));
			this._reservationflyings = new EntitySet<reservationflying>(new Action<reservationflying>(this.attach_reservationflyings), new Action<reservationflying>(this.detach_reservationflyings));
			this._plane = default(EntityRef<plane>);
			this._route = default(EntityRef<route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rotationid", DbType="Int NOT NULL")]
		public int rotationid
		{
			get
			{
				return this._rotationid;
			}
			set
			{
				if ((this._rotationid != value))
				{
					if (this._route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrotationidChanging(value);
					this.SendPropertyChanging();
					this._rotationid = value;
					this.SendPropertyChanged("rotationid");
					this.OnrotationidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ktarih", DbType="DateTime NOT NULL")]
		public System.DateTime ktarih
		{
			get
			{
				return this._ktarih;
			}
			set
			{
				if ((this._ktarih != value))
				{
					this.OnktarihChanging(value);
					this.SendPropertyChanging();
					this._ktarih = value;
					this.SendPropertyChanged("ktarih");
					this.OnktarihChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vtarih", DbType="DateTime NOT NULL")]
		public System.DateTime vtarih
		{
			get
			{
				return this._vtarih;
			}
			set
			{
				if ((this._vtarih != value))
				{
					this.OnvtarihChanging(value);
					this.SendPropertyChanging();
					this._vtarih = value;
					this.SendPropertyChanged("vtarih");
					this.OnvtarihChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_planeid", DbType="Int NOT NULL")]
		public int planeid
		{
			get
			{
				return this._planeid;
			}
			set
			{
				if ((this._planeid != value))
				{
					if (this._plane.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnplaneidChanging(value);
					this.SendPropertyChanging();
					this._planeid = value;
					this.SendPropertyChanged("planeid");
					this.OnplaneidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="flying_flightpricess", Storage="_flightpricesses", ThisKey="id", OtherKey="ucusid")]
		public EntitySet<flightpricess> flightpricesses
		{
			get
			{
				return this._flightpricesses;
			}
			set
			{
				this._flightpricesses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="flying_reservationflying", Storage="_reservationflyings", ThisKey="id", OtherKey="ucusid")]
		public EntitySet<reservationflying> reservationflyings
		{
			get
			{
				return this._reservationflyings;
			}
			set
			{
				this._reservationflyings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="plane_flying", Storage="_plane", ThisKey="planeid", OtherKey="id", IsForeignKey=true)]
		public plane plane
		{
			get
			{
				return this._plane.Entity;
			}
			set
			{
				plane previousValue = this._plane.Entity;
				if (((previousValue != value) 
							|| (this._plane.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._plane.Entity = null;
						previousValue.flyings.Remove(this);
					}
					this._plane.Entity = value;
					if ((value != null))
					{
						value.flyings.Add(this);
						this._planeid = value.id;
					}
					else
					{
						this._planeid = default(int);
					}
					this.SendPropertyChanged("plane");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="route_flying", Storage="_route", ThisKey="rotationid", OtherKey="id", IsForeignKey=true)]
		public route route
		{
			get
			{
				return this._route.Entity;
			}
			set
			{
				route previousValue = this._route.Entity;
				if (((previousValue != value) 
							|| (this._route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._route.Entity = null;
						previousValue.flyings.Remove(this);
					}
					this._route.Entity = value;
					if ((value != null))
					{
						value.flyings.Add(this);
						this._rotationid = value.id;
					}
					else
					{
						this._rotationid = default(int);
					}
					this.SendPropertyChanged("route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_flightpricesses(flightpricess entity)
		{
			this.SendPropertyChanging();
			entity.flying = this;
		}
		
		private void detach_flightpricesses(flightpricess entity)
		{
			this.SendPropertyChanging();
			entity.flying = null;
		}
		
		private void attach_reservationflyings(reservationflying entity)
		{
			this.SendPropertyChanging();
			entity.flying = this;
		}
		
		private void detach_reservationflyings(reservationflying entity)
		{
			this.SendPropertyChanging();
			entity.flying = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.location")]
	public partial class location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _lid;
		
		private string _lname;
		
		private string _lcode;
		
		private EntitySet<route> _routes;
		
		private EntitySet<route> _routes1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlidChanging(int value);
    partial void OnlidChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OnlcodeChanging(string value);
    partial void OnlcodeChanged();
    #endregion
		
		public location()
		{
			this._routes = new EntitySet<route>(new Action<route>(this.attach_routes), new Action<route>(this.detach_routes));
			this._routes1 = new EntitySet<route>(new Action<route>(this.attach_routes1), new Action<route>(this.detach_routes1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int lid
		{
			get
			{
				return this._lid;
			}
			set
			{
				if ((this._lid != value))
				{
					this.OnlidChanging(value);
					this.SendPropertyChanging();
					this._lid = value;
					this.SendPropertyChanged("lid");
					this.OnlidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string lcode
		{
			get
			{
				return this._lcode;
			}
			set
			{
				if ((this._lcode != value))
				{
					this.OnlcodeChanging(value);
					this.SendPropertyChanging();
					this._lcode = value;
					this.SendPropertyChanged("lcode");
					this.OnlcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_route", Storage="_routes", ThisKey="lid", OtherKey="kid")]
		public EntitySet<route> routes
		{
			get
			{
				return this._routes;
			}
			set
			{
				this._routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_route1", Storage="_routes1", ThisKey="lid", OtherKey="vid")]
		public EntitySet<route> routes1
		{
			get
			{
				return this._routes1;
			}
			set
			{
				this._routes1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_routes(route entity)
		{
			this.SendPropertyChanging();
			entity.location = this;
		}
		
		private void detach_routes(route entity)
		{
			this.SendPropertyChanging();
			entity.location = null;
		}
		
		private void attach_routes1(route entity)
		{
			this.SendPropertyChanging();
			entity.location1 = this;
		}
		
		private void detach_routes1(route entity)
		{
			this.SendPropertyChanging();
			entity.location1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.passenger")]
	public partial class passenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _rezid;
		
		private string _pname;
		
		private string _plastname;
		
		private System.DateTime _pdogumtarihi;
		
		private string _ptcno;
		
		private EntityRef<rezervation> _rezervation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrezidChanging(int value);
    partial void OnrezidChanged();
    partial void OnpnameChanging(string value);
    partial void OnpnameChanged();
    partial void OnplastnameChanging(string value);
    partial void OnplastnameChanged();
    partial void OnpdogumtarihiChanging(System.DateTime value);
    partial void OnpdogumtarihiChanged();
    partial void OnptcnoChanging(string value);
    partial void OnptcnoChanged();
    #endregion
		
		public passenger()
		{
			this._rezervation = default(EntityRef<rezervation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rezid", DbType="Int NOT NULL")]
		public int rezid
		{
			get
			{
				return this._rezid;
			}
			set
			{
				if ((this._rezid != value))
				{
					if (this._rezervation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrezidChanging(value);
					this.SendPropertyChanging();
					this._rezid = value;
					this.SendPropertyChanged("rezid");
					this.OnrezidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pname", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string pname
		{
			get
			{
				return this._pname;
			}
			set
			{
				if ((this._pname != value))
				{
					this.OnpnameChanging(value);
					this.SendPropertyChanging();
					this._pname = value;
					this.SendPropertyChanged("pname");
					this.OnpnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_plastname", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string plastname
		{
			get
			{
				return this._plastname;
			}
			set
			{
				if ((this._plastname != value))
				{
					this.OnplastnameChanging(value);
					this.SendPropertyChanging();
					this._plastname = value;
					this.SendPropertyChanged("plastname");
					this.OnplastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pdogumtarihi", DbType="Date NOT NULL")]
		public System.DateTime pdogumtarihi
		{
			get
			{
				return this._pdogumtarihi;
			}
			set
			{
				if ((this._pdogumtarihi != value))
				{
					this.OnpdogumtarihiChanging(value);
					this.SendPropertyChanging();
					this._pdogumtarihi = value;
					this.SendPropertyChanged("pdogumtarihi");
					this.OnpdogumtarihiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ptcno", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string ptcno
		{
			get
			{
				return this._ptcno;
			}
			set
			{
				if ((this._ptcno != value))
				{
					this.OnptcnoChanging(value);
					this.SendPropertyChanging();
					this._ptcno = value;
					this.SendPropertyChanged("ptcno");
					this.OnptcnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rezervation_passenger", Storage="_rezervation", ThisKey="rezid", OtherKey="id", IsForeignKey=true)]
		public rezervation rezervation
		{
			get
			{
				return this._rezervation.Entity;
			}
			set
			{
				rezervation previousValue = this._rezervation.Entity;
				if (((previousValue != value) 
							|| (this._rezervation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rezervation.Entity = null;
						previousValue.passengers.Remove(this);
					}
					this._rezervation.Entity = value;
					if ((value != null))
					{
						value.passengers.Add(this);
						this._rezid = value.id;
					}
					else
					{
						this._rezid = default(int);
					}
					this.SendPropertyChanged("rezervation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.plane")]
	public partial class plane : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _no;
		
		private string _ad;
		
		private EntitySet<flying> _flyings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnoChanging(int value);
    partial void OnnoChanged();
    partial void OnadChanging(string value);
    partial void OnadChanged();
    #endregion
		
		public plane()
		{
			this._flyings = new EntitySet<flying>(new Action<flying>(this.attach_flyings), new Action<flying>(this.detach_flyings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_no", DbType="Int NOT NULL")]
		public int no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ad", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string ad
		{
			get
			{
				return this._ad;
			}
			set
			{
				if ((this._ad != value))
				{
					this.OnadChanging(value);
					this.SendPropertyChanging();
					this._ad = value;
					this.SendPropertyChanged("ad");
					this.OnadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="plane_flying", Storage="_flyings", ThisKey="id", OtherKey="planeid")]
		public EntitySet<flying> flyings
		{
			get
			{
				return this._flyings;
			}
			set
			{
				this._flyings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_flyings(flying entity)
		{
			this.SendPropertyChanging();
			entity.plane = this;
		}
		
		private void detach_flyings(flying entity)
		{
			this.SendPropertyChanging();
			entity.plane = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reservationflying")]
	public partial class reservationflying : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _rezid;
		
		private int _ucusid;
		
		private string _durum;
		
		private EntityRef<flying> _flying;
		
		private EntityRef<rezervation> _rezervation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrezidChanging(int value);
    partial void OnrezidChanged();
    partial void OnucusidChanging(int value);
    partial void OnucusidChanged();
    partial void OndurumChanging(string value);
    partial void OndurumChanged();
    #endregion
		
		public reservationflying()
		{
			this._flying = default(EntityRef<flying>);
			this._rezervation = default(EntityRef<rezervation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rezid", DbType="Int NOT NULL")]
		public int rezid
		{
			get
			{
				return this._rezid;
			}
			set
			{
				if ((this._rezid != value))
				{
					if (this._rezervation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrezidChanging(value);
					this.SendPropertyChanging();
					this._rezid = value;
					this.SendPropertyChanged("rezid");
					this.OnrezidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ucusid", DbType="Int NOT NULL")]
		public int ucusid
		{
			get
			{
				return this._ucusid;
			}
			set
			{
				if ((this._ucusid != value))
				{
					if (this._flying.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnucusidChanging(value);
					this.SendPropertyChanging();
					this._ucusid = value;
					this.SendPropertyChanged("ucusid");
					this.OnucusidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_durum", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string durum
		{
			get
			{
				return this._durum;
			}
			set
			{
				if ((this._durum != value))
				{
					this.OndurumChanging(value);
					this.SendPropertyChanging();
					this._durum = value;
					this.SendPropertyChanged("durum");
					this.OndurumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="flying_reservationflying", Storage="_flying", ThisKey="ucusid", OtherKey="id", IsForeignKey=true)]
		public flying flying
		{
			get
			{
				return this._flying.Entity;
			}
			set
			{
				flying previousValue = this._flying.Entity;
				if (((previousValue != value) 
							|| (this._flying.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._flying.Entity = null;
						previousValue.reservationflyings.Remove(this);
					}
					this._flying.Entity = value;
					if ((value != null))
					{
						value.reservationflyings.Add(this);
						this._ucusid = value.id;
					}
					else
					{
						this._ucusid = default(int);
					}
					this.SendPropertyChanged("flying");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rezervation_reservationflying", Storage="_rezervation", ThisKey="rezid", OtherKey="id", IsForeignKey=true)]
		public rezervation rezervation
		{
			get
			{
				return this._rezervation.Entity;
			}
			set
			{
				rezervation previousValue = this._rezervation.Entity;
				if (((previousValue != value) 
							|| (this._rezervation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rezervation.Entity = null;
						previousValue.reservationflyings.Remove(this);
					}
					this._rezervation.Entity = value;
					if ((value != null))
					{
						value.reservationflyings.Add(this);
						this._rezid = value.id;
					}
					else
					{
						this._rezid = default(int);
					}
					this.SendPropertyChanged("rezervation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rezervationprice")]
	public partial class rezervationprice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _rezervationid;
		
		private int _fiyat;
		
		private EntityRef<rezervation> _rezervation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrezervationidChanging(int value);
    partial void OnrezervationidChanged();
    partial void OnfiyatChanging(int value);
    partial void OnfiyatChanged();
    #endregion
		
		public rezervationprice()
		{
			this._rezervation = default(EntityRef<rezervation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rezervationid", DbType="Int NOT NULL")]
		public int rezervationid
		{
			get
			{
				return this._rezervationid;
			}
			set
			{
				if ((this._rezervationid != value))
				{
					if (this._rezervation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrezervationidChanging(value);
					this.SendPropertyChanging();
					this._rezervationid = value;
					this.SendPropertyChanged("rezervationid");
					this.OnrezervationidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fiyat", DbType="Int NOT NULL")]
		public int fiyat
		{
			get
			{
				return this._fiyat;
			}
			set
			{
				if ((this._fiyat != value))
				{
					this.OnfiyatChanging(value);
					this.SendPropertyChanging();
					this._fiyat = value;
					this.SendPropertyChanged("fiyat");
					this.OnfiyatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rezervation_rezervationprice", Storage="_rezervation", ThisKey="rezervationid", OtherKey="id", IsForeignKey=true)]
		public rezervation rezervation
		{
			get
			{
				return this._rezervation.Entity;
			}
			set
			{
				rezervation previousValue = this._rezervation.Entity;
				if (((previousValue != value) 
							|| (this._rezervation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._rezervation.Entity = null;
						previousValue.rezervationprices.Remove(this);
					}
					this._rezervation.Entity = value;
					if ((value != null))
					{
						value.rezervationprices.Add(this);
						this._rezervationid = value.id;
					}
					else
					{
						this._rezervationid = default(int);
					}
					this.SendPropertyChanged("rezervation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rezervations")]
	public partial class rezervation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _rezno;
		
		private System.DateTime _reztarihi;
		
		private string _rezdurumu;
		
		private EntitySet<passenger> _passengers;
		
		private EntitySet<reservationflying> _reservationflyings;
		
		private EntitySet<rezervationprice> _rezervationprices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnreznoChanging(int value);
    partial void OnreznoChanged();
    partial void OnreztarihiChanging(System.DateTime value);
    partial void OnreztarihiChanged();
    partial void OnrezdurumuChanging(string value);
    partial void OnrezdurumuChanged();
    #endregion
		
		public rezervation()
		{
			this._passengers = new EntitySet<passenger>(new Action<passenger>(this.attach_passengers), new Action<passenger>(this.detach_passengers));
			this._reservationflyings = new EntitySet<reservationflying>(new Action<reservationflying>(this.attach_reservationflyings), new Action<reservationflying>(this.detach_reservationflyings));
			this._rezervationprices = new EntitySet<rezervationprice>(new Action<rezervationprice>(this.attach_rezervationprices), new Action<rezervationprice>(this.detach_rezervationprices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rezno", DbType="Int NOT NULL")]
		public int rezno
		{
			get
			{
				return this._rezno;
			}
			set
			{
				if ((this._rezno != value))
				{
					this.OnreznoChanging(value);
					this.SendPropertyChanging();
					this._rezno = value;
					this.SendPropertyChanged("rezno");
					this.OnreznoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reztarihi", DbType="DateTime NOT NULL")]
		public System.DateTime reztarihi
		{
			get
			{
				return this._reztarihi;
			}
			set
			{
				if ((this._reztarihi != value))
				{
					this.OnreztarihiChanging(value);
					this.SendPropertyChanging();
					this._reztarihi = value;
					this.SendPropertyChanged("reztarihi");
					this.OnreztarihiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rezdurumu", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string rezdurumu
		{
			get
			{
				return this._rezdurumu;
			}
			set
			{
				if ((this._rezdurumu != value))
				{
					this.OnrezdurumuChanging(value);
					this.SendPropertyChanging();
					this._rezdurumu = value;
					this.SendPropertyChanged("rezdurumu");
					this.OnrezdurumuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rezervation_passenger", Storage="_passengers", ThisKey="id", OtherKey="rezid")]
		public EntitySet<passenger> passengers
		{
			get
			{
				return this._passengers;
			}
			set
			{
				this._passengers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rezervation_reservationflying", Storage="_reservationflyings", ThisKey="id", OtherKey="rezid")]
		public EntitySet<reservationflying> reservationflyings
		{
			get
			{
				return this._reservationflyings;
			}
			set
			{
				this._reservationflyings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="rezervation_rezervationprice", Storage="_rezervationprices", ThisKey="id", OtherKey="rezervationid")]
		public EntitySet<rezervationprice> rezervationprices
		{
			get
			{
				return this._rezervationprices;
			}
			set
			{
				this._rezervationprices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_passengers(passenger entity)
		{
			this.SendPropertyChanging();
			entity.rezervation = this;
		}
		
		private void detach_passengers(passenger entity)
		{
			this.SendPropertyChanging();
			entity.rezervation = null;
		}
		
		private void attach_reservationflyings(reservationflying entity)
		{
			this.SendPropertyChanging();
			entity.rezervation = this;
		}
		
		private void detach_reservationflyings(reservationflying entity)
		{
			this.SendPropertyChanging();
			entity.rezervation = null;
		}
		
		private void attach_rezervationprices(rezervationprice entity)
		{
			this.SendPropertyChanging();
			entity.rezervation = this;
		}
		
		private void detach_rezervationprices(rezervationprice entity)
		{
			this.SendPropertyChanging();
			entity.rezervation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.route")]
	public partial class route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _kid;
		
		private int _vid;
		
		private EntitySet<flying> _flyings;
		
		private EntityRef<location> _location;
		
		private EntityRef<location> _location1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnkidChanging(int value);
    partial void OnkidChanged();
    partial void OnvidChanging(int value);
    partial void OnvidChanged();
    #endregion
		
		public route()
		{
			this._flyings = new EntitySet<flying>(new Action<flying>(this.attach_flyings), new Action<flying>(this.detach_flyings));
			this._location = default(EntityRef<location>);
			this._location1 = default(EntityRef<location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kid", DbType="Int NOT NULL")]
		public int kid
		{
			get
			{
				return this._kid;
			}
			set
			{
				if ((this._kid != value))
				{
					if (this._location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnkidChanging(value);
					this.SendPropertyChanging();
					this._kid = value;
					this.SendPropertyChanged("kid");
					this.OnkidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_vid", DbType="Int NOT NULL")]
		public int vid
		{
			get
			{
				return this._vid;
			}
			set
			{
				if ((this._vid != value))
				{
					if (this._location1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvidChanging(value);
					this.SendPropertyChanging();
					this._vid = value;
					this.SendPropertyChanged("vid");
					this.OnvidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="route_flying", Storage="_flyings", ThisKey="id", OtherKey="rotationid")]
		public EntitySet<flying> flyings
		{
			get
			{
				return this._flyings;
			}
			set
			{
				this._flyings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_route", Storage="_location", ThisKey="kid", OtherKey="lid", IsForeignKey=true)]
		public location location
		{
			get
			{
				return this._location.Entity;
			}
			set
			{
				location previousValue = this._location.Entity;
				if (((previousValue != value) 
							|| (this._location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._location.Entity = null;
						previousValue.routes.Remove(this);
					}
					this._location.Entity = value;
					if ((value != null))
					{
						value.routes.Add(this);
						this._kid = value.lid;
					}
					else
					{
						this._kid = default(int);
					}
					this.SendPropertyChanged("location");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="location_route1", Storage="_location1", ThisKey="vid", OtherKey="lid", IsForeignKey=true)]
		public location location1
		{
			get
			{
				return this._location1.Entity;
			}
			set
			{
				location previousValue = this._location1.Entity;
				if (((previousValue != value) 
							|| (this._location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._location1.Entity = null;
						previousValue.routes1.Remove(this);
					}
					this._location1.Entity = value;
					if ((value != null))
					{
						value.routes1.Add(this);
						this._vid = value.lid;
					}
					else
					{
						this._vid = default(int);
					}
					this.SendPropertyChanged("location1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_flyings(flying entity)
		{
			this.SendPropertyChanging();
			entity.route = this;
		}
		
		private void detach_flyings(flying entity)
		{
			this.SendPropertyChanging();
			entity.route = null;
		}
	}
}
#pragma warning restore 1591
